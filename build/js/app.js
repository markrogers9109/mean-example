'use strict';

;(function () {
  "use strict";

  angular.module('app', ['templates', 'ui.router', 'welcome', 'login', 'register', 'user-service']).config(["$urlRouterProvider", "$stateProvider", function ($urlRouterProvider, $stateProvider) {
    $urlRouterProvider.otherwise('/register');
  }]).run(function () {});
})();
'use strict';

;(function () {
  "use strict";

  angular.module('register', []);

  angular.module('register').config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('register', {
      url: '/register',
      controller: 'RegisterCtrl',
      templateUrl: 'register/register.html',
      controllerAs: 'register'
    });
  }]);
})();
'use strict';

;(function () {
  "use strict";

  angular.module('login', []);

  angular.module('login').config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('login', {
      url: '/login',
      controller: 'LoginCtrl',
      templateUrl: 'login/login.html',
      controllerAs: 'login'
    });
  }]);
})();
'use strict';

;(function () {
  "use strict";

  angular.module('welcome', []);

  angular.module('welcome').controller('WelcomeCtrl', WelcomeCtrl).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('welcome', {
      url: '/welcome',
      controller: 'WelcomeCtrl',
      templateUrl: 'welcome/welcome.html',
      controllerAs: 'welcome'
    });
  }]);

  function WelcomeCtrl() {
    this.message = 'Bitwise Says Hello.';
  }
})();
'use strict';

;(function () {
    "use strict";

    angular.module('register').controller('RegisterCtrl', ["User", function RegisterCtrl(User) {
        var _this = this;

        console.log('Register loaded');

        this.register = function (userData) {
            User.create(userData).then(function (user) {
                console.log(user);
            }).catch(function (error) {
                console.error;
            });
        };
        User.getAllUsers().then(function (users) {
            _this.users = users.data;
            console.log(users);
        });
    }]);
})();
'use strict';

;(function () {
    "use strict";

    User.$inject = ["$http"];
    angular.module('user-service', []);

    angular.module('user-service').service('User', User);

    function User($http) {
        var create = function create(userData) {
            return $http.post('/register', userData);
        };

        var login = function login(userData) {
            return $http.post('/login', userData);
        };

        var getAllUsers = function getAllUsers(userData) {
            return $http.get('/users', userData);
        };

        return {
            create: create,
            login: login,
            getAllUsers: getAllUsers
        };
    }
})();
'use strict';

;(function () {
    "use strict";

    angular.module('login').controller('LoginCtrl', ["User", function LoginCtrl(User) {
        console.log('Login loaded');

        this.login = function (userData) {
            User.login(userData).then(function (result) {
                console.log(result);
            }).catch(function (error) {
                console.error;
            });
        };
    }]);
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
